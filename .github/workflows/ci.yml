name: Laravel CI

# When should this run?
on:
  push:
    branches: [ mahmoud, main ]
  pull_request:
    branches: [ mahmoud, main ]

jobs:
  test:
    name: Run Tests & Code Quality Checks
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: laravel_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    # Step 1: Download your code
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better SonarQube analysis
      
    # Step 2: Setup PHP (the programming language Laravel uses)
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, dom, fileinfo, mysql, gd, pcov
        coverage: pcov
        tools: composer:v2
        
    # Step 3: Cache dependencies (saves time by not re-downloading everything)
    - name: Cache Composer packages
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-
          
    # Step 4: Install Laravel dependencies
    - name: Install dependencies
      run: composer install --prefer-dist --no-progress --no-interaction
      
    # Step 5: Setup Node.js for frontend assets
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    # Step 6: Install Node.js dependencies
    - name: Install npm dependencies
      run: npm ci
      
    # Step 7: Build frontend assets
    - name: Build frontend assets
      run: npm run build
      
    # Step 8: Setup environment
    - name: Setup environment
      run: |
        cp .env.example .env
        php artisan key:generate
        
    # Step 9: Run database migrations
    - name: Run database migrations
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: laravel_test
        DB_USERNAME: root
        DB_PASSWORD: password
      run: php artisan migrate --force
      
    # Step 10: Run code style checks (makes sure your code looks nice)
    - name: Run code style checks
      run: php vendor/bin/pint --test
      
    # Step 11: Run tests with coverage
    - name: Run tests with coverage
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: laravel_test
        DB_USERNAME: root
        DB_PASSWORD: password
      run: php artisan test --coverage --coverage-clover=coverage.xml
      
    # Step 12: Setup Java (required for SonarQube Scanner)
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    # Step 13: Run SonarQube Scanner
    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@v6
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      continue-on-error: true  # Don't fail CI if SonarQube has issues

    # Step 14: Collect CI/CD Metrics
    - name: Collect Pipeline Metrics
      run: |
        echo "# CI/CD Pipeline Metrics" > ci_metrics.txt
        echo "pipeline_duration_seconds $(date +%s)" >> ci_metrics.txt
        echo "pipeline_success 1" >> ci_metrics.txt
        echo "tests_passed $(php artisan test --count 2>/dev/null | grep -o '[0-9]\+ tests' | grep -o '[0-9]\+' || echo 0)" >> ci_metrics.txt
        echo "build_timestamp $(date +%s)" >> ci_metrics.txt
      continue-on-error: true

    # Step 15: Upload metrics (optional - you can send to monitoring system)
    - name: Archive Metrics
      uses: actions/upload-artifact@v4
      with:
        name: pipeline-metrics
        path: ci_metrics.txt
      continue-on-error: true

  # Docker Build Job (runs after tests pass)
  docker-build:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: test  # Only run if tests pass
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/mahmoud')  # Run on main or mahmoud branch
    
    steps:
    # Step 1: Checkout code
    - name: Checkout code
      uses: actions/checkout@v4
      
    # Step 2: Set up Docker Buildx
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    # Step 3: Login to Docker Hub
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}
        
    # Step 4: Extract metadata
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: mahmoudbelghaieb/plateformeecoevents
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    # Step 5: Build and push Docker image
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max