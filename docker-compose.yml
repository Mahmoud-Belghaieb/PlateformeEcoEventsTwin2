services:
  # Laravel Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: plateformeecoevents_app
    restart: unless-stopped
    ports:
      - "8080:80"
    volumes:
      - ./storage:/var/www/html/storage
      - ./bootstrap/cache:/var/www/html/bootstrap/cache
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - DB_CONNECTION=mysql
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_DATABASE=plateformeecoevents
      - DB_USERNAME=laravel
      - DB_PASSWORD=secret
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - ecoevents-network

  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: plateformeecoevents_mysql
    restart: unless-stopped
    ports:
      - "3308:3306"
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: plateformeecoevents
      MYSQL_USER: laravel
      MYSQL_PASSWORD: secret
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - ecoevents-network

  # Redis (for caching and sessions)
  redis:
    image: redis:7-alpine
    container_name: plateformeecoevents_redis
    restart: unless-stopped
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 10s
      retries: 5
    networks:
      - ecoevents-network

  # phpMyAdmin (for database management)
  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    container_name: plateformeecoevents_phpmyadmin
    restart: unless-stopped
    ports:
      - "8082:80"
    environment:
      PMA_HOST: mysql
      PMA_PORT: 3306
      PMA_USER: laravel
      PMA_PASSWORD: secret
      MYSQL_ROOT_PASSWORD: rootpassword
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - ecoevents-network

  # Prometheus (Metrics Collection)
  prometheus:
    image: prom/prometheus:latest
    container_name: plateformeecoevents_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./docker/prometheus/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - ecoevents-network

  # Grafana (Metrics Visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: plateformeecoevents_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - ecoevents-network

  # Node Exporter (System Metrics)
  node-exporter:
    image: prom/node-exporter:latest
    container_name: plateformeecoevents_node_exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - ecoevents-network

  # MySQL Exporter (Database Metrics)
  mysql-exporter:
    image: prom/mysqld-exporter:latest
    container_name: plateformeecoevents_mysql_exporter
    restart: unless-stopped
    ports:
      - "9104:9104"
    environment:
      - DATA_SOURCE_NAME=laravel:secret@(mysql:3306)/plateformeecoevents
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - ecoevents-network

  # Redis Exporter (Cache Metrics)
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: plateformeecoevents_redis_exporter
    restart: unless-stopped
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://redis:6379
    depends_on:
      - redis
    networks:
      - ecoevents-network

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  ecoevents-network:
    driver: bridge